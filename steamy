#!perl
use rjbs;

use Getopt::Long::Descriptive;
use HTML::TreeBuilder;
use JSON;
use LWP::UserAgent;
use XML::LibXML;

my ($opt, $usage) = describe_options(
  '%c %o',
  [ 'time=i', 'playtime allowed before exclusion (min.)', { default => 10 } ],
  [ 'key=s',  'Steam API key',           { default => $ENV{STEAM_API_KEY} } ],
);

my $JSON = JSON->new;
my $ua   = LWP::UserAgent->new;

my $api_key = $opt->key;
my @userslugs = @ARGV;

my %GAME;

sub userslug_to_steamid {
  my ($userslug) = @_;

  return $userslug if $userslug =~ /\A[0-9]+\z/;

  my $uri = sprintf 'https://steamcommunity.com/id/%s/?xml=1', $userslug;

  my $res = $ua->get($uri);

  die "fail" unless $res->is_success;

  open my $fh, '<', \$res->decoded_content(charset => 'none')
    or die "error making handle to XML results: $!";

  my $doc = XML::LibXML->load_xml(IO => $fh);

  my @steam64 = $doc->getElementsByTagName('steamID64');

  die "wtf too many" if @steam64 > 1;
  die "wtf no ident" if @steam64 < 1;

  return $steam64[0]->textContent;
}

for my $userslug (@userslugs) {
  my $steamid = userslug_to_steamid($userslug);

  printf "%s -> %s\n", $userslug, $steamid;

  my $owned_uri = sprintf 'https://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=%s&steamid=%s&format=json&include_appinfo=1',
    $api_key,
    $steamid;

  my $json = $ua->get($owned_uri)->decoded_content;

  my $data = $JSON->decode($json);

  unless ($data->{response}{games}) {
    warn "no games for $userslug\n";
    next;
  }

  my @games = $data->{response}{games}->@*;
  for my $game (@games) {
    my $rec = ($GAME{ $game->{appid} } ||= { unplayers => 0 });
    $rec->{name} = $game->{name} // '(?)';
    $rec->{owners}++;
    $rec->{unplayers}++ if $game->{playtime_forever} < $opt->time;
  }
}

my @app_ids = sort { $GAME{$b}{unplayers} <=> $GAME{$a}{unplayers}
                  || $GAME{$b}{owners}    <=> $GAME{$a}{owners}
                  || $GAME{$a}{name} cmp $GAME{$b}{name} } keys %GAME;

for my $appid (@app_ids) {
  my $game = $GAME{$appid};

  my $u_pct = int($game->{unplayers} / @userslugs * 100);
  next unless $u_pct;

  my $o_pct = int($game->{owners} / @userslugs * 100);

  printf "%2i%% / %2i%% - %s (%s)\n", $u_pct, $o_pct, $game->{name}, $appid;
}


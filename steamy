#!perl
use utf8;
use strict;
use autodie;
use warnings;
use warnings    qw< FATAL  utf8     >;
use open        qw< :std  :utf8     >;
use charnames   qw< :full >;
use feature     qw< unicode_strings >;
use 5.22.0;
use warnings;

use experimental 'postderef', 'signatures';

# This program was written for http://jfdi.club/ game-playing club.

use Getopt::Long::Descriptive;
use HTML::TreeBuilder;
use JSON;
use LWP::UserAgent;
use XML::LibXML;
use CHI;
use Encode;

my ($opt, $usage) = describe_options(
  '%c %o USERID...',
  [ 'time=i',   'playtime allowed before exclusion (min.)', { default => 10 } ],
  [ 'key=s',    'Steam API key',           { default => $ENV{STEAM_API_KEY} } ],
  [ 'limit=i',  'stop listing after this many items', { default => 25 }       ],
  [ 'cache-duration=s',  'Duration for new items in cache (default is "6 hours")', { default => '6 hours' }       ],
  [ 'linux',   'Require linux support',                                       ],
  [ 'mac',     'Require mac support',                                         ],
  [ 'windows', 'Require windows support',                                     ],
  [ 'price!',   'fetch price data', { default => 1 } ],
);

$usage->die unless @ARGV;

my $cache = CHI->new(
  driver => 'File',
  root_dir => "$ENV{HOME}/.steamy-cache"
);

my $cached_get = sub {
  my ($ua, $uri) = @_;

  if (my $ret = $cache->get($uri)) {
    return $ret
  } else {
    my $response = $ua->get($uri);
    $cache->set($uri, $response, $opt->cache_duration) if $response->is_success;
    return $response
  }
};

my $JSON = JSON->new;
my $ua   = LWP::UserAgent->new;

my $api_key = $opt->key;
my @userslugs = @ARGV;

binmode(STDOUT, ":encoding(UTF-8)");

my %BLACKLISTED = (
  340    => '"Half-Life 2: Lost Cost" is a tech demo',
  223530 => '"Left 4 Dead 2 Beta" is a beta',
);

my %GAME;

sub userslug_to_steamid {
  my ($userslug) = @_;

  return $userslug if $userslug =~ /\A[0-9]+\z/;

  my $uri = sprintf 'https://steamcommunity.com/id/%s/?xml=1', $userslug;

  my $res = $ua->$cached_get($uri);

  die "fail" unless $res->is_success;

  open my $fh, '<:raw', \$res->decoded_content(charset => 'none')
    or die "error making handle to XML results: $!";

  my $doc = XML::LibXML->load_xml(IO => $fh);

  my @steam64 = $doc->getElementsByTagName('steamID64');

  die "This should never happen: got more than one Steam ID for $userslug"
    if @steam64 > 1;

  die "Couldn't find any Steam ID for $userslug" if @steam64 < 1;

  return $steam64[0]->textContent;
}

for my $userslug (@userslugs) {
  my $steamid = userslug_to_steamid($userslug);

  printf "%s -> %s\n", $userslug, $steamid;

  my $owned_uri = sprintf 'https://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key=%s&steamid=%s&format=json&include_appinfo=1',
    $api_key,
    $steamid;

  my $json = $ua->$cached_get($owned_uri)->decoded_content;

  my $data = $JSON->decode($json);

  unless ($data->{response}{games}) {
    warn "no games for $userslug\n";
    next;
  }

  my @games = $data->{response}{games}->@*;
  for my $game (@games) {
    next if $BLACKLISTED{ $game->{appid} };

    my $rec = ($GAME{ $game->{appid} } ||= { unplayers => 0 });
    $rec->{name} = $game->{name} // '(?)';
    $rec->{owners}++;

    warn "adding $rec->{name}\n";
    if ($game->{playtime_forever} >= $opt->time) {
      $rec->{players}++;
    } else {
      $rec->{unplayers}++;
    }
  }
}

sub game_price ($appid) {
  return unless $opt->price;

  my $uri = sprintf 'http://store.steampowered.com/api/appdetails?appids=%s',
    $appid;

  my $res = $ua->$cached_get($uri);
  return unless $res->is_success;

  my $data = $JSON->decode($res->decoded_content);

  return unless my $price_data = $data->{$appid}{data}{price_overview};
  return unless $price_data->{currency} eq 'USD';
  return unless defined $price_data->{final};
  return $price_data->{final} / 100;
}

sub game_os ($appid) {
  my $uri = sprintf 'http://store.steampowered.com/api/appdetails?appids=%s',
    $appid;

  my $res = $ua->$cached_get($uri);
  return unless $res->is_success;

  my $data = $JSON->decode($res->decoded_content);

  my $p = $data->{$appid}{data}{platforms};
  my $ret = '';

  # I am a monster
  no warnings;
  next GAME if $opt->linux && !$p->{linux};
  next GAME if $opt->mac && !$p->{mac};
  next GAME if $opt->windows && !$p->{windows};

  $ret .= $p->{mac}     ? " \N{GREEN APPLE} "    : '   ';
  $ret .= $p->{linux}   ? " \N{PENGUIN} "        : '   ';
  $ret .= $p->{windows} ? " \N{NEGATIVE SQUARED LATIN CAPITAL LETTER W} "
                        : '   ';

  $ret
}

sub game_tags ($appid) {
  my $uri = sprintf 'http://store.steampowered.com/app/%s/Steamy/',
    $appid;

  my $res = $ua->$cached_get($uri);

  use HTML::TreeBuilder;
  my $root = HTML::TreeBuilder->new_from_content($res->decoded_content);
  my @tags = map {; $_->as_text } $root->look_down(class => 'app_tag');
  s/^\s+//, s/\s+$// for @tags;
  return @tags;
}

my @app_ids = sort { $GAME{$b}{unplayers} <=> $GAME{$a}{unplayers}
                  || $GAME{$b}{owners}    <=> $GAME{$a}{owners}
                  || $GAME{$a}{name} cmp $GAME{$b}{name} } keys %GAME;

# $#app_ids = $opt->limit - 1 if $opt->limit and @app_ids > $opt->limit;

GAME:
for my $appid (@app_ids) {
  my $game = $GAME{$appid};

  # my $u_pct = int($game->{unplayers} / @userslugs * 100);
  # my $o_pct = int($game->{owners} / @userslugs * 100);
  # printf "%2i%% / %2i%% - %s (%s)\n", $u_pct, $o_pct, $game->{name}, $appid;

  my $unowners = @userslugs - ($game->{owners} // 0);

  my @tags = game_tags($appid);
  do { next } unless grep {; $_ eq 'Multiplayer' } @tags;

  printf " %2i | %2i |  %2i | \$%4.0f | % 9s | %s (%s)\n",
    $game->{unplayers} + $unowners, # everyone who has not played the game
    $unowners,                      # people who would have to buy the game
    $game->{players} // 0,          # owned it, played it
    game_price($appid) // -1,
    game_os($appid) // '',
    decode('UTF-8', $game->{name}),
    $appid;
}

